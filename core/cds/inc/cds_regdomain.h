/*
 * Copyright (c) 2011, 2014-2016 The Linux Foundation. All rights reserved.
 *
 * Previously licensed under the ISC license by Qualcomm Atheros, Inc.
 *
 *
 * Permission to use, copy, modify, and/or distribute this software for
 * any purpose with or without fee is hereby granted, provided that the
 * above copyright notice and this permission notice appear in all
 * copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
 * AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * This file was originally distributed by Qualcomm Atheros, Inc.
 * under proprietary terms before Copyright ownership was assigned
 * to the Linux Foundation.
 */

/*
 * Notifications and licenses are retained for attribution purposes only.
 */
/*
 * Copyright (c) 2002-2006 Sam Leffler, Errno Consulting
 * Copyright (c) 2005-2006 Atheros Communications, Inc.
 * Copyright (c) 2010, Atheros Communications Inc.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the following conditions are met:
 * 1. The materials contained herein are unmodified and are used
 *    unmodified.
 * 2. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following NO
 *    ''WARRANTY'' disclaimer below (''Disclaimer''), without
 *    modification.
 * 3. Redistributions in binary form must reproduce at minimum a
 *    disclaimer similar to the Disclaimer below and any redistribution
 *    must be conditioned upon including a substantially similar
 *    Disclaimer requirement for further binary redistribution.
 * 4. Neither the names of the above-listed copyright holders nor the
 *    names of any contributors may be used to endorse or promote
 *    product derived from this software without specific prior written
 *    permission.
 *
 * NO WARRANTY
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF NONINFRINGEMENT,
 * MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE
 * FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGES.
 *
 * This module contains the regulatory domain private structure definitions .
 *
 */

#ifndef REGULATORY_H
#define REGULATORY_H

#define MAX_CHANNELS_PER_OPERATING_CLASS  25
#define	CTRY_DEBUG              0x1ff
#define	CTRY_DEFAULT            0
#define COUNTRY_ERD_FLAG        0x8000
#define WORLDWIDE_ROAMING_FLAG  0x4000
#define DEF_REGDMN              FCC3_FCCA
#define CDS_MAX_SUPP_OPER_CLASSES 32

enum EnumRd {
	NO_ENUMRD = 0x00,
	NULL1_WORLD = 0x03,
	NULL1_ETSIB = 0x07,
	NULL1_ETSIC = 0x08,
	FCC1_FCCA = 0x10,
	FCC1_WORLD = 0x11,
	FCC4_FCCA = 0x12,
	FCC5_FCCA = 0x13,
	FCC6_FCCA = 0x14,

	FCC2_FCCA = 0x20,
	FCC2_WORLD = 0x21,
	FCC2_ETSIC = 0x22,
	FCC6_WORLD = 0x23,
	FRANCE_RES = 0x31,
	FCC3_FCCA = 0x3A,
	FCC3_WORLD = 0x3B,
	FCC3_ETSIC = 0x3F,

	ETSI1_WORLD = 0x37,
	ETSI3_ETSIA = 0x32,
	ETSI2_WORLD = 0x35,
	ETSI3_WORLD = 0x36,
	ETSI4_WORLD = 0x30,
	ETSI4_ETSIC = 0x38,
	ETSI5_WORLD = 0x39,
	ETSI6_WORLD = 0x34,
	ETSI8_WORLD = 0x3D,
	ETSI9_WORLD = 0x3E,
	ETSI_RESERVED = 0x33,

	MKK1_MKKA = 0x40,
	MKK1_MKKB = 0x41,
	APL4_WORLD = 0x42,
	MKK2_MKKA = 0x43,
	APL_RESERVED = 0x44,
	APL2_WORLD = 0x45,
	APL2_APLC = 0x46,
	APL3_WORLD = 0x47,
	MKK1_FCCA = 0x48,
	APL2_APLD = 0x49,
	MKK1_MKKA1 = 0x4A,
	MKK1_MKKA2 = 0x4B,
	MKK1_MKKC = 0x4C,
	APL2_FCCA = 0x4D,
	APL11_FCCA = 0x4F,

	APL3_FCCA = 0x50,
	APL12_WORLD = 0x51,
	APL1_WORLD = 0x52,
	APL1_FCCA = 0x53,
	APL1_APLA = 0x54,
	APL1_ETSIC = 0x55,
	APL2_ETSIC = 0x56,
	APL5_WORLD = 0x58,
	APL13_WORLD = 0x5A,
	APL6_WORLD = 0x5B,
	APL7_FCCA = 0x5C,
	APL8_WORLD = 0x5D,
	APL9_MKKC = 0x5E,
	APL10_MKKC = 0x5F,

	WOR0_WORLD = 0x60,
	WOR1_WORLD = 0x61,
	WOR2_WORLD = 0x62,
	WOR3_WORLD = 0x63,
	WOR4_WORLD = 0x64,
	WOR5_ETSIC = 0x65,

	WOR01_WORLD = 0x66,
	WOR02_WORLD = 0x67,
	EU1_WORLD = 0x68,

	WOR9_WORLD = 0x69,
	WORA_WORLD = 0x6A,
	WORB_WORLD = 0x6B,
	WORC_WORLD = 0x6C,

	MKK3_MKKB = 0x80,
	MKK3_MKKA2 = 0x81,
	MKK3_MKKC = 0x82,

	MKK4_MKKB = 0x83,
	MKK4_MKKA2 = 0x84,
	MKK4_MKKC = 0x85,

	MKK5_MKKB = 0x86,
	MKK5_MKKA2 = 0x87,
	MKK5_MKKC = 0x88,
	MKK5_MKKA = 0x99,
	MKK5_FCCA = 0x9A,

	MKK6_MKKB = 0x89,
	MKK6_MKKA2 = 0x8A,
	MKK6_MKKC = 0x8B,

	MKK7_MKKB = 0x8C,
	MKK7_MKKA2 = 0x8D,
	MKK7_MKKC = 0x8E,

	MKK8_MKKB = 0x8F,
	MKK8_MKKA2 = 0x90,
	MKK8_MKKC = 0x91,

	MKK14_MKKA1 = 0x92,
	MKK15_MKKA1 = 0x93,

	MKK10_FCCA = 0xD0,
	MKK10_MKKA1 = 0xD1,
	MKK10_MKKC = 0xD2,
	MKK10_MKKA2 = 0xD3,

	MKK11_MKKA = 0xD4,
	MKK11_FCCA = 0xD5,
	MKK11_MKKA1 = 0xD6,
	MKK11_MKKC = 0xD7,
	MKK11_MKKA2 = 0xD8,

	MKK12_MKKA = 0xD9,
	MKK12_FCCA = 0xDA,
	MKK12_MKKA1 = 0xDB,
	MKK12_MKKC = 0xDC,
	MKK12_MKKA2 = 0xDD,

	MKK13_MKKB = 0xDE,

	MKK3_MKKA = 0xF0,
	MKK3_MKKA1 = 0xF1,
	MKK3_FCCA = 0xF2,
	MKK4_MKKA = 0xF3,
	MKK4_MKKA1 = 0xF4,
	MKK4_FCCA = 0xF5,
	MKK9_MKKA = 0xF6,
	MKK10_MKKA = 0xF7,
	MKK6_MKKA1 = 0xF8,
	MKK6_FCCA = 0xF9,
	MKK7_MKKA1 = 0xFA,
	MKK7_FCCA = 0xFB,
	MKK9_FCCA = 0xFC,
	MKK9_MKKA1 = 0xFD,
	MKK9_MKKC = 0xFE,
	MKK9_MKKA2 = 0xFF,

	APL1 = 0x0150,
	APL2 = 0x0250,
	APL3 = 0x0350,
	APL4 = 0x0450,
	APL5 = 0x0550,
	APL6 = 0x0650,
	APL7 = 0x0750,
	APL8 = 0x0850,
	APL9 = 0x0950,
	APL10 = 0x1050,
	APL11 = 0x1150,
	APL12 = 0x1160,

	ETSI1 = 0x0130,
	ETSI2 = 0x0230,
	ETSI3 = 0x0330,
	ETSI4 = 0x0430,
	ETSI5 = 0x0530,
	ETSI6 = 0x0630,
	ETSI8 = 0x0830,
	ETSI9 = 0x0930,
	ETSIA = 0x0A30,
	ETSIB = 0x0B30,
	ETSIC = 0x0C30,

	FCC1 = 0x0110,
	FCC2 = 0x0120,
	FCC3 = 0x0160,
	FCC4 = 0x0165,
	FCC5 = 0x0510,
	FCC6 = 0x0610,
	FCCA = 0x0A10,

	APLD = 0x0D50,

	MKK1 = 0x0140,
	MKK2 = 0x0240,
	MKK3 = 0x0340,
	MKK4 = 0x0440,
	MKK5 = 0x0540,
	MKK6 = 0x0640,
	MKK7 = 0x0740,
	MKK8 = 0x0840,
	MKK9 = 0x0940,
	MKK10 = 0x0B40,
	MKK11 = 0x1140,
	MKK12 = 0x1240,
	MKK13 = 0x0C40,
	MKK14 = 0x1440,
	MKK15 = 0x1540,
	MKKA = 0x0A40,
	MKKC = 0x0A50,

	NULL1 = 0x0198,
	WORLD = 0x0199,
	DEBUG_REG_DMN = 0x01ff,
};

enum {
	FCC = 0x10,
	MKK = 0x40,
	ETSI = 0x30,
	NO_CTL = 0xff
};


/* These defines should match the table from ah_internal.h */
enum HAL_DFS_DOMAIN {
	DFS_UNINIT_DOMAIN = 0,  /* Uninitialized dfs domain */
	DFS_FCC_DOMAIN = 1,     /* FCC3 dfs domain */
	DFS_ETSI_DOMAIN = 2,    /* ETSI dfs domain */
	DFS_MKK4_DOMAIN = 3     /* Japan dfs domain */
};

typedef struct reg_dmn_pair_mapping {
	uint16_t regDmnEnum;
	uint16_t regDmn5GHz;
	uint16_t regDmn2GHz;
	uint16_t singleCC;
} REG_DMN_PAIR_MAPPING;

typedef struct {
	uint16_t countryCode;
	uint16_t regDmnEnum;
	const char *isoName;
	const char *name;
} COUNTRY_CODE_TO_ENUM_RD;

typedef struct reg_domain {
	uint16_t regDmnEnum;
	uint8_t conformance_test_limit;
} REG_DOMAIN;

enum CountryCode {
	CTRY_AFGHANISTAN = 4,
	CTRY_ALBANIA = 8,
	CTRY_ALGERIA = 12,
	CTRY_AMERICAN_SAMOA = 16,
	CTRY_ANGUILLA = 660,
	CTRY_ARGENTINA = 32,
	CTRY_ARGENTINA_AP = 5003,
	CTRY_ARMENIA = 51,
	CTRY_ARUBA = 533,
	CTRY_AUSTRALIA = 36,
	CTRY_AUSTRALIA_AP = 5000,
	CTRY_AUSTRIA = 40,
	CTRY_AZERBAIJAN = 31,
	CTRY_BAHAMAS = 44,
	CTRY_BAHRAIN = 48,
	CTRY_BANGLADESH = 50,
	CTRY_BARBADOS = 52,
	CTRY_BELARUS = 112,
	CTRY_BELGIUM = 56,
	CTRY_BELIZE = 84,
	CTRY_BERMUDA = 60,
	CTRY_BHUTAN = 64,
	CTRY_BOLIVIA = 68,
	CTRY_BOSNIA_HERZ = 70,
	CTRY_BRAZIL = 76,
	CTRY_BRUNEI_DARUSSALAM = 96,
	CTRY_BULGARIA = 100,
	CTRY_BURKINA_FASO = 854,
	CTRY_CAMBODIA = 116,
	CTRY_CANADA = 124,
	CTRY_CANADA_AP = 5001,
	CTRY_CAYMAN_ISLANDS = 136,
	CTRY_CENTRAL_AFRICA_REPUBLIC = 140,
	CTRY_CHAD = 148,
	CTRY_CHILE = 152,
	CTRY_CHINA = 156,
	CTRY_CHRISTMAS_ISLAND = 162,
	CTRY_COLOMBIA = 170,
	CTRY_COSTA_RICA = 188,
	CTRY_COTE_DIVOIRE = 384,
	CTRY_CROATIA = 191,
	CTRY_CYPRUS = 196,
	CTRY_CZECH = 203,
	CTRY_DENMARK = 208,
	CTRY_DOMINICA = 212,
	CTRY_DOMINICAN_REPUBLIC = 214,
	CTRY_ECUADOR = 218,
	CTRY_EGYPT = 818,
	CTRY_EL_SALVADOR = 222,
	CTRY_ESTONIA = 233,
	CTRY_ETHIOPIA = 231,
	CTRY_FINLAND = 246,
	CTRY_FRANCE = 250,
	CTRY_FRENCH_GUIANA = 254,
	CTRY_FRENCH_POLYNESIA = 258,
	CTRY_GEORGIA = 268,
	CTRY_GERMANY = 276,
	CTRY_GHANA = 288,
	CTRY_GREECE = 300,
	CTRY_GREENLAND = 304,
	CTRY_GRENADA = 308,
	CTRY_GUADELOUPE = 312,
	CTRY_GUAM = 316,
	CTRY_GUATEMALA = 320,
	CTRY_GUYANA = 328,
	CTRY_HAITI = 332,
	CTRY_HONDURAS = 340,
	CTRY_HONG_KONG = 344,
	CTRY_HUNGARY = 348,
	CTRY_ICELAND = 352,
	CTRY_INDIA = 356,
	CTRY_INDONESIA = 360,
	CTRY_IRAN = 364,
	CTRY_IRELAND = 372,
	CTRY_ISRAEL = 376,
	CTRY_ITALY = 380,
	CTRY_JAMAICA = 388,
	CTRY_JORDAN = 400,
	CTRY_KAZAKHSTAN = 398,
	CTRY_KENYA = 404,
	CTRY_KOREA_NORTH = 408,
	CTRY_KOREA_ROC = 410,
	CTRY_KOREA_ROC_AP = 412,
	CTRY_KUWAIT = 414,
	CTRY_LATVIA = 428,
	CTRY_LEBANON = 422,
	CTRY_LESOTHO = 426,
	CTRY_LIBYA = 434,
	CTRY_LIECHTENSTEIN = 438,
	CTRY_LITHUANIA = 440,
	CTRY_LUXEMBOURG = 442,
	CTRY_MACAU = 446,
	CTRY_MACEDONIA = 807,
	CTRY_MALAWI = 454,
	CTRY_MALAYSIA = 458,
	CTRY_MALDIVES = 462,
	CTRY_MALTA = 470,
	CTRY_MARSHALL_ISLANDS = 584,
	CTRY_MARTINIQUE = 474,
	CTRY_MAURITANIA = 478,
	CTRY_MAURITIUS = 480,
	CTRY_MAYOTTE = 175,
	CTRY_MEXICO = 484,
	CTRY_MICRONESIA = 583,
	CTRY_MOLDOVA = 498,
	CTRY_MONACO = 492,
	CTRY_MONGOLIA = 496,
	CTRY_MONTENEGRO = 499,
	CTRY_MOROCCO = 504,
	CTRY_NEPAL = 524,
	CTRY_NETHERLANDS = 528,
	CTRY_NETHERLANDS_ANTILLES = 530,
	CTRY_NEW_ZEALAND = 554,
	CTRY_NIGERIA = 566,
	CTRY_NORTHERN_MARIANA_ISLANDS = 580,
	CTRY_NICARAGUA = 558,
	CTRY_NORWAY = 578,
	CTRY_OMAN = 512,
	CTRY_PAKISTAN = 586,
	CTRY_PALAU = 585,
	CTRY_PANAMA = 591,
	CTRY_PAPUA_NEW_GUINEA = 598,
	CTRY_PARAGUAY = 600,
	CTRY_PERU = 604,
	CTRY_PHILIPPINES = 608,
	CTRY_POLAND = 616,
	CTRY_PORTUGAL = 620,
	CTRY_PUERTO_RICO = 630,
	CTRY_QATAR = 634,
	CTRY_REUNION = 638,
	CTRY_ROMANIA = 642,
	CTRY_RUSSIA = 643,
	CTRY_RWANDA = 646,
	CTRY_SAINT_BARTHELEMY = 652,
	CTRY_SAINT_KITTS_AND_NEVIS = 659,
	CTRY_SAINT_LUCIA = 662,
	CTRY_SAINT_MARTIN = 663,
	CTRY_SAINT_PIERRE_AND_MIQUELON = 666,
	CTRY_SAINT_VINCENT_AND_THE_GRENADIENS = 670,
	CTRY_SAMOA = 882,
	CTRY_SAUDI_ARABIA = 682,
	CTRY_SENEGAL = 686,
	CTRY_SERBIA = 688,
	CTRY_SINGAPORE = 702,
	CTRY_SLOVAKIA = 703,
	CTRY_SLOVENIA = 705,
	CTRY_SOUTH_AFRICA = 710,
	CTRY_SPAIN = 724,
	CTRY_SURINAME = 740,
	CTRY_SRI_LANKA = 144,
	CTRY_SWEDEN = 752,
	CTRY_SWITZERLAND = 756,
	CTRY_SYRIA = 760,
	CTRY_TAIWAN = 158,
	CTRY_TANZANIA = 834,
	CTRY_THAILAND = 764,
	CTRY_TOGO = 768,
	CTRY_TRINIDAD_Y_TOBAGO = 780,
	CTRY_TUNISIA = 788,
	CTRY_TURKEY = 792,
	CTRY_TURKS_AND_CAICOS = 796,
	CTRY_UGANDA = 800,
	CTRY_UKRAINE = 804,
	CTRY_UAE = 784,
	CTRY_UNITED_KINGDOM = 826,
	CTRY_UNITED_STATES = 840,
	CTRY_UNITED_STATES_AP = 841,
	CTRY_UNITED_STATES_AP2 = 843,
	CTRY_UNITED_STATES_PS = 842,
	CTRY_URUGUAY = 858,
	CTRY_UZBEKISTAN = 860,
	CTRY_VANUATU = 548,
	CTRY_VENEZUELA = 862,
	CTRY_VIET_NAM = 704,
	CTRY_VIRGIN_ISLANDS = 850,
	CTRY_WALLIS_AND_FUTUNA = 876,
	CTRY_YEMEN = 887,
	CTRY_ZIMBABWE = 716,
	CTRY_JAPAN7 = 4007,
	CTRY_JAPAN8 = 4008,
	CTRY_JAPAN9 = 4009,
	CTRY_JAPAN10 = 4010,
	CTRY_JAPAN11 = 4011,
	CTRY_JAPAN12 = 4012,
	CTRY_JAPAN13 = 4013,
	CTRY_JAPAN14 = 4014,
	CTRY_JAPAN15 = 4015,
	CTRY_JAPAN25 = 4025,
	CTRY_JAPAN26 = 4026,
	CTRY_JAPAN27 = 4027,
	CTRY_JAPAN28 = 4028,
	CTRY_JAPAN29 = 4029,
	CTRY_JAPAN34 = 4034,
	CTRY_JAPAN35 = 4035,
	CTRY_JAPAN36 = 4036,
	CTRY_JAPAN37 = 4037,
	CTRY_JAPAN38 = 4038,
	CTRY_JAPAN39 = 4039,
	CTRY_JAPAN40 = 4040,
	CTRY_JAPAN41 = 4041,
	CTRY_JAPAN42 = 4042,
	CTRY_JAPAN43 = 4043,
	CTRY_JAPAN44 = 4044,
	CTRY_JAPAN45 = 4045,
	CTRY_JAPAN46 = 4046,
	CTRY_JAPAN47 = 4047,
	CTRY_JAPAN48 = 4048,
	CTRY_JAPAN49 = 4049,
	CTRY_JAPAN55 = 4055,
	CTRY_JAPAN56 = 4056,
};

typedef struct ath_hal_reg_dmn_tables {
	const REG_DMN_PAIR_MAPPING *regDomainPairs;
	const COUNTRY_CODE_TO_ENUM_RD *allCountries;
	const REG_DOMAIN *regDomains;
	uint16_t regDomainPairsCt;
	uint16_t allCountriesCt;
	uint16_t regDomainsCt;
} HAL_REG_DMN_TABLES;


static const REG_DMN_PAIR_MAPPING ah_cmn_reg_domain_pairs[] = {
	{NO_ENUMRD, DEBUG_REG_DMN, DEBUG_REG_DMN, 0},
	{NULL1_WORLD, NULL1, WORLD, 0},
	{NULL1_ETSIB, NULL1, ETSIB, 0},
	{NULL1_ETSIC, NULL1, ETSIC, 0},
	{FCC2_FCCA, FCC2, FCCA, 0},
	{FCC2_WORLD, FCC2, WORLD, 0},
	{FCC2_ETSIC, FCC2, ETSIC, 0},
	{FCC3_FCCA, FCC3, FCCA, 0},
	{FCC3_WORLD, FCC3, WORLD, 0},
	{FCC3_ETSIC, FCC3, ETSIC, 0},
	{FCC4_FCCA, FCC4, FCCA, 0},
	{FCC5_FCCA, FCC5, FCCA, 0},
	{FCC6_FCCA, FCC6, FCCA, 0},
	{FCC6_WORLD, FCC6, WORLD, 0},
	{ETSI1_WORLD, ETSI1, WORLD, 0},
	{ETSI2_WORLD, ETSI2, WORLD, 0},
	{ETSI3_WORLD, ETSI3, WORLD, 0},
	{ETSI4_WORLD, ETSI4, WORLD, 0},
	{ETSI5_WORLD, ETSI5, WORLD, 0},
	{ETSI6_WORLD, ETSI6, WORLD, 0},
	{ETSI8_WORLD, ETSI8, WORLD, 0},
	{ETSI9_WORLD, ETSI9, WORLD, 0},
	{ETSI3_ETSIA, ETSI3, WORLD, 0},
	{FRANCE_RES, ETSI3, WORLD, 0},
	{FCC1_WORLD, FCC1, WORLD, 0},
	{FCC1_FCCA, FCC1, FCCA, 0},
	{APL1_WORLD, APL1, WORLD, 0},
	{APL2_WORLD, APL2, WORLD, 0},
	{APL2_FCCA, APL2, FCCA, 0},
	{APL3_WORLD, APL3, WORLD, 0},
	{APL4_WORLD, APL4, WORLD, 0},
	{APL5_WORLD, APL5, WORLD, 0},
	{APL6_WORLD, APL6, WORLD, 0},
	{APL7_FCCA, APL7, FCCA, 0},
	{APL8_WORLD, APL8, WORLD, 0},
	{APL9_MKKC, APL9, MKKC, 0},
	{APL10_MKKC, APL10, MKKC, 0},
	{APL3_FCCA, APL3, FCCA, 0},
	{APL1_ETSIC, APL1, ETSIC, 0},
	{APL2_ETSIC, APL2, ETSIC, 0},
	{MKK3_MKKA, MKK3, MKKA, CTRY_JAPAN25},
	{MKK3_MKKB, MKK3, MKKA, CTRY_JAPAN7},
	{MKK3_MKKA1, MKK3, MKKA, CTRY_JAPAN26},
	{MKK3_MKKA2, MKK3, MKKA, CTRY_JAPAN8},
	{MKK3_MKKC, MKK3, MKKC, CTRY_JAPAN9},
	{MKK3_FCCA, MKK3, FCCA, CTRY_JAPAN27},
	{MKK4_MKKA, MKK4, MKKA, CTRY_JAPAN36},
	{MKK4_MKKB, MKK4, MKKA, CTRY_JAPAN10},
	{MKK4_MKKA1, MKK4, MKKA, CTRY_JAPAN28},
	{MKK4_MKKA2, MKK4, MKKA, CTRY_JAPAN11},
	{MKK4_MKKC, MKK4, MKKC, CTRY_JAPAN12},
	{MKK4_FCCA, MKK4, FCCA, CTRY_JAPAN29},
	{MKK5_MKKB, MKK5, MKKA, CTRY_JAPAN13},
	{MKK5_MKKA2, MKK5, MKKA, CTRY_JAPAN14},
	{MKK5_MKKC, MKK5, MKKC, CTRY_JAPAN15},
	{MKK5_FCCA, MKK5, FCCA, CTRY_JAPAN56},
	{MKK9_MKKA, MKK9, MKKA, CTRY_JAPAN34},
	{MKK9_FCCA, MKK9, FCCA, CTRY_JAPAN37},
	{MKK9_MKKA1, MKK9, MKKA, CTRY_JAPAN38},
	{MKK9_MKKA2, MKK9, MKKA, CTRY_JAPAN40},
	{MKK9_MKKC, MKK9, MKKC, CTRY_JAPAN39},
	{MKK10_MKKA, MKK10, MKKA, CTRY_JAPAN35},
	{MKK10_FCCA, MKK10, FCCA, CTRY_JAPAN41},
	{MKK10_MKKA1, MKK10, MKKA, CTRY_JAPAN42},
	{MKK10_MKKA2, MKK10, MKKA, CTRY_JAPAN44},
	{MKK10_MKKC, MKK10, MKKC, CTRY_JAPAN43},
	{MKK11_MKKA, MKK11, MKKA, CTRY_JAPAN45},
	{MKK11_FCCA, MKK11, FCCA, CTRY_JAPAN46},
	{MKK11_MKKA1, MKK11, MKKA, CTRY_JAPAN47},
	{MKK11_MKKA2, MKK11, MKKA, CTRY_JAPAN49},
	{MKK11_MKKC, MKK11, MKKC, CTRY_JAPAN48},

	{WOR0_WORLD, WOR0_WORLD, WOR0_WORLD, 0},
	{WOR1_WORLD, WOR1_WORLD, WOR1_WORLD, 0},
	{WOR2_WORLD, WOR2_WORLD, WOR2_WORLD, 0},
	{WOR3_WORLD, WOR3_WORLD, WOR3_WORLD, 0},
	{WOR4_WORLD, WOR4_WORLD, WOR4_WORLD, 0},
	{WOR5_ETSIC, WOR5_ETSIC, WOR5_ETSIC, 0},
	{WOR01_WORLD, WOR01_WORLD, WOR01_WORLD, 0},
	{WOR02_WORLD, WOR02_WORLD, WOR02_WORLD, 0},
	{EU1_WORLD, EU1_WORLD, EU1_WORLD, 0},
	{WOR9_WORLD, WOR9_WORLD, WOR9_WORLD, 0},
	{WORA_WORLD, WORA_WORLD, WORA_WORLD, 0},
	{WORB_WORLD, WORB_WORLD, WORB_WORLD, 0},
	{WORC_WORLD, WORC_WORLD, WORC_WORLD, 0},
};

static const COUNTRY_CODE_TO_ENUM_RD ah_cmn_all_countries[] = {
	{CTRY_DEBUG, NO_ENUMRD, "DB", "DEBUG"},
	{CTRY_DEFAULT, DEF_REGDMN, "NA", "NO_COUNTRY_SET"},
	{CTRY_ALBANIA, NULL1_WORLD, "AL", "ALBANIA"},
	{CTRY_ALGERIA, NULL1_WORLD, "DZ", "ALGERIA"},
	{CTRY_ARGENTINA, FCC3_WORLD, "AR", "ARGENTINA"},
	{CTRY_ARMENIA, ETSI4_WORLD, "AM", "ARMENIA"},
	{CTRY_ARUBA, ETSI1_WORLD, "AW", "ARUBA"},
	{CTRY_AUSTRALIA, FCC3_WORLD, "AU", "AUSTRALIA"},
	{CTRY_AUSTRIA, ETSI1_WORLD, "AT", "AUSTRIA"},
	{CTRY_AZERBAIJAN, ETSI4_WORLD, "AZ", "AZERBAIJAN"},
	{CTRY_BAHAMAS, FCC3_WORLD, "BS", "BAHAMAS"},
	{CTRY_BAHRAIN, APL6_WORLD, "BH", "BAHRAIN"},
	{CTRY_BANGLADESH, NULL1_WORLD, "BD", "BANGLADESH"},
	{CTRY_BARBADOS, FCC2_WORLD, "BB", "BARBADOS"},
	{CTRY_BELARUS, ETSI1_WORLD, "BY", "BELARUS"},
	{CTRY_BELGIUM, ETSI1_WORLD, "BE", "BELGIUM"},
	{CTRY_BELIZE, APL1_ETSIC, "BZ", "BELIZE"},
	{CTRY_BERMUDA, FCC3_FCCA, "BM", "BERMUDA"},
	{CTRY_BOLIVIA, APL1_ETSIC, "BO", "BOLIVIA"},
	{CTRY_BOSNIA_HERZ, ETSI1_WORLD, "BA", "BOSNIA AND HERZEGOVINA"},
	{CTRY_BRAZIL, FCC3_WORLD, "BR", "BRAZIL"},
	{CTRY_BRUNEI_DARUSSALAM, APL6_WORLD, "BN", "BRUNEI DARUSSALAM"},
	{CTRY_BULGARIA, ETSI1_WORLD, "BG", "BULGARIA"},
	{CTRY_CAMBODIA, ETSI1_WORLD, "KH", "CAMBODIA"},
	{CTRY_CANADA, FCC3_FCCA, "CA", "CANADA"},
	{CTRY_CHILE, APL6_WORLD, "CL", "CHILE"},
	{CTRY_CHINA, APL1_WORLD, "CN", "CHINA"},
	{CTRY_COLOMBIA, FCC1_FCCA, "CO", "COLOMBIA"},
	{CTRY_COSTA_RICA, FCC1_WORLD, "CR", "COSTA RICA"},
	{CTRY_CROATIA, ETSI1_WORLD, "HR", "CROATIA"},
	{CTRY_CYPRUS, ETSI1_WORLD, "CY", "CYPRUS"},
	{CTRY_CZECH, ETSI1_WORLD, "CZ", "CZECH REPUBLIC"},
	{CTRY_DENMARK, ETSI1_WORLD, "DK", "DENMARK"},
	{CTRY_DOMINICAN_REPUBLIC, FCC1_FCCA, "DO", "DOMINICAN REPUBLIC"},
	{CTRY_ECUADOR, FCC1_WORLD, "EC", "ECUADOR"},
	{CTRY_EGYPT, ETSI3_WORLD, "EG", "EGYPT"},
	{CTRY_EL_SALVADOR, FCC1_WORLD, "SV", "EL SALVADOR"},
	{CTRY_ESTONIA, ETSI1_WORLD, "EE", "ESTONIA"},
	{CTRY_FINLAND, ETSI1_WORLD, "FI", "FINLAND"},
	{CTRY_FRANCE, ETSI1_WORLD, "FR", "FRANCE"},
	{CTRY_GEORGIA, ETSI4_WORLD, "GE", "GEORGIA"},
	{CTRY_GERMANY, ETSI1_WORLD, "DE", "GERMANY"},
	{CTRY_GREECE, ETSI1_WORLD, "GR", "GREECE"},
	{CTRY_GREENLAND, ETSI1_WORLD, "GL", "GREENLAND"},
	{CTRY_GRENADA, FCC3_FCCA, "GD", "GRENADA"},
	{CTRY_GUAM, FCC1_FCCA, "GU", "GUAM"},
	{CTRY_GUATEMALA, FCC1_FCCA, "GT", "GUATEMALA"},
	{CTRY_HAITI, ETSI1_WORLD, "HT", "HAITI"},
	{CTRY_HONDURAS, FCC3_WORLD, "HN", "HONDURAS"},
	{CTRY_HONG_KONG, FCC3_WORLD, "HK", "HONG KONG"},
	{CTRY_HUNGARY, ETSI1_WORLD, "HU", "HUNGARY"},
	{CTRY_ICELAND, ETSI1_WORLD, "IS", "ICELAND"},
	{CTRY_INDIA, APL6_WORLD, "IN", "INDIA"},
	{CTRY_INDONESIA, APL2_WORLD, "ID", "INDONESIA"},
	{CTRY_IRAN, APL1_WORLD, "IR", "IRAN"},
	{CTRY_IRELAND, ETSI1_WORLD, "IE", "IRELAND"},
	{CTRY_ISRAEL, ETSI3_WORLD, "IL", "ISRAEL"},
	{CTRY_ITALY, ETSI1_WORLD, "IT", "ITALY"},
	{CTRY_JAMAICA, FCC3_WORLD, "JM", "JAMAICA"},
	{CTRY_JAPAN14, MKK5_MKKA2, "JP", "JAPAN"},
	{CTRY_JAPAN7, MKK3_MKKB, "JP", "JAPAN7"},
	{CTRY_JAPAN8, MKK3_MKKA2, "JP", "JAPAN8"},
	{CTRY_JAPAN9, MKK3_MKKC, "JP", "JAPAN9"},
	{CTRY_JAPAN10, MKK4_MKKB, "JP", "JAPAN10"},
	{CTRY_JAPAN11, MKK4_MKKA2, "JP", "JAPAN11"},
	{CTRY_JAPAN12, MKK4_MKKC, "JP", "JAPAN12"},
	{CTRY_JAPAN13, MKK5_MKKB, "JP", "JAPAN13"},
	{CTRY_JAPAN14, MKK5_MKKA2, "JP", "JAPAN14"},
	{CTRY_JAPAN15, MKK5_MKKC, "JP", "JAPAN15"},
	{CTRY_JAPAN25, MKK3_MKKA, "JP", "JAPAN25"},
	{CTRY_JAPAN26, MKK3_MKKA1, "JP", "JAPAN26"},
	{CTRY_JAPAN27, MKK3_FCCA, "JP", "JAPAN27"},
	{CTRY_JAPAN28, MKK4_MKKA1, "JP", "JAPAN28"},
	{CTRY_JAPAN29, MKK4_FCCA, "JP", "JAPAN29"},
	{CTRY_JAPAN34, MKK9_MKKA, "JP", "JAPAN34"},
	{CTRY_JAPAN35, MKK10_MKKA, "JP", "JAPAN35"},
	{CTRY_JAPAN36, MKK4_MKKA, "JP", "JAPAN36"},
	{CTRY_JAPAN37, MKK9_FCCA, "JP", "JAPAN37"},
	{CTRY_JAPAN38, MKK9_MKKA1, "JP", "JAPAN38"},
	{CTRY_JAPAN39, MKK9_MKKC, "JP", "JAPAN39"},
	{CTRY_JAPAN40, MKK9_MKKA2, "JP", "JAPAN40"},
	{CTRY_JAPAN41, MKK10_FCCA, "JP", "JAPAN41"},
	{CTRY_JAPAN42, MKK10_MKKA1, "JP", "JAPAN42"},
	{CTRY_JAPAN43, MKK10_MKKC, "JP", "JAPAN43"},
	{CTRY_JAPAN44, MKK10_MKKA2, "JP", "JAPAN44"},
	{CTRY_JAPAN45, MKK11_MKKA, "JP", "JAPAN45"},
	{CTRY_JAPAN46, MKK11_FCCA, "JP", "JAPAN46"},
	{CTRY_JAPAN47, MKK11_MKKA1, "JP", "JAPAN47"},
	{CTRY_JAPAN48, MKK11_MKKC, "JP", "JAPAN48"},
	{CTRY_JAPAN49, MKK11_MKKA2, "JP", "JAPAN49"},
	{CTRY_JAPAN55, MKK5_MKKA, "JP", "JAPAN55"},
	{CTRY_JAPAN56, MKK5_FCCA, "JP", "JAPAN56"},
	{CTRY_JORDAN, ETSI2_WORLD, "JO", "JORDAN"},
	{CTRY_KAZAKHSTAN, NULL1_WORLD, "KZ", "KAZAKHSTAN"},
	{CTRY_KENYA, APL1_WORLD, "KE", "KENYA"},
	{CTRY_KOREA_NORTH, APL9_MKKC, "KP", "NORTH KOREA"},
	{CTRY_KOREA_ROC, APL10_MKKC, "KR", "KOREA REPUBLIC"},
	{CTRY_KOREA_ROC_AP, APL9_MKKC, "KR", "KOREA REPUBLIC3"},
	{CTRY_KUWAIT, ETSI3_WORLD, "KW", "KUWAIT"},
	{CTRY_LATVIA, ETSI1_WORLD, "LV", "LATVIA"},
	{CTRY_LEBANON, APL1_WORLD, "LB", "LEBANON"},
	{CTRY_LIECHTENSTEIN, ETSI1_WORLD, "LI", "LIECHTENSTEIN"},
	{CTRY_LITHUANIA, ETSI1_WORLD, "LT", "LITHUANIA"},
	{CTRY_LUXEMBOURG, ETSI1_WORLD, "LU", "LUXEMBOURG"},
	{CTRY_MACAU, FCC2_WORLD, "MO", "MACAU SAR"},
	{CTRY_MACEDONIA, ETSI1_WORLD, "MK", "MACEDONIA, FYRO"},
	{CTRY_MALAYSIA, FCC1_WORLD, "MY", "MALAYSIA"},
	{CTRY_MALTA, ETSI1_WORLD, "MT", "MALTA"},
	{CTRY_MAURITIUS, ETSI1_WORLD, "MU", "MAURITIUS"},
	{CTRY_MEXICO, FCC1_WORLD, "MX", "MEXICO"},
	{CTRY_MONACO, ETSI4_WORLD, "MC", "MONACO"},
	{CTRY_MOROCCO, APL4_WORLD, "MA", "MOROCCO"},
	{CTRY_NEPAL, APL1_WORLD, "NP", "NEPAL"},
	{CTRY_NETHERLANDS, ETSI1_WORLD, "NL", "NETHERLANDS"},
	{CTRY_NETHERLANDS_ANTILLES, ETSI1_WORLD, "AN", "NETHERLANDS ANTILLES"},
	{CTRY_NEW_ZEALAND, FCC3_ETSIC, "NZ", "NEW ZEALAND"},
	{CTRY_NICARAGUA, FCC3_FCCA, "NI", "NICARAGUA"},
	{CTRY_NORWAY, ETSI1_WORLD, "NO", "NORWAY"},
	{CTRY_OMAN, FCC3_WORLD, "OM", "OMAN"},
	{CTRY_PAKISTAN, APL1_WORLD, "PK", "PAKISTAN"},
	{CTRY_PANAMA, FCC1_FCCA, "PA", "PANAMA"},
	{CTRY_PAPUA_NEW_GUINEA, FCC1_WORLD, "PG", "PAPUA NEW GUINEA"},
	{CTRY_PARAGUAY, FCC3_WORLD, "PY", "PARAGUAY"},
	{CTRY_PERU, FCC3_WORLD, "PE", "PERU"},
	{CTRY_PHILIPPINES, FCC3_WORLD, "PH", "PHILIPPINES"},
	{CTRY_POLAND, ETSI1_WORLD, "PL", "POLAND"},
	{CTRY_PORTUGAL, ETSI1_WORLD, "PT", "PORTUGAL"},
	{CTRY_PUERTO_RICO, FCC1_FCCA, "PR", "PUERTO RICO"},
	{CTRY_QATAR, APL1_WORLD, "QA", "QATAR"},
	{CTRY_ROMANIA, ETSI1_WORLD, "RO", "ROMANIA"},
	{CTRY_RUSSIA, ETSI8_WORLD, "RU", "RUSSIA"},
	{CTRY_RWANDA, APL1_WORLD, "RW", "RWANDA"},
	{CTRY_SAUDI_ARABIA, FCC2_WORLD, "SA", "SAUDI ARABIA"},
	{CTRY_SERBIA, ETSI1_WORLD, "RS", "REPUBLIC OF SERBIA"},
	{CTRY_MONTENEGRO, ETSI1_WORLD, "ME", "MONTENEGRO"},
	{CTRY_SINGAPORE, FCC3_WORLD, "SG", "SINGAPORE"},
	{CTRY_SLOVAKIA, ETSI1_WORLD, "SK", "SLOVAKIA"},
	{CTRY_SLOVENIA, ETSI1_WORLD, "SI", "SLOVENIA"},
	{CTRY_SOUTH_AFRICA, FCC3_WORLD, "ZA", "SOUTH AFRICA"},
	{CTRY_SPAIN, ETSI1_WORLD, "ES", "SPAIN"},
	{CTRY_SRI_LANKA, FCC3_WORLD, "LK", "SRI LANKA"},
	{CTRY_SWEDEN, ETSI1_WORLD, "SE", "SWEDEN"},
	{CTRY_SWITZERLAND, ETSI1_WORLD, "CH", "SWITZERLAND"},
	{CTRY_SYRIA, NULL1_WORLD, "SY", "SYRIAN ARAB REPUBLIC"},
	{CTRY_TAIWAN, APL7_FCCA, "TW", "TAIWAN"},
	{CTRY_TANZANIA, APL1_WORLD, "TZ", "TANZANIA"},
	{CTRY_THAILAND, FCC3_WORLD, "TH", "THAILAND"},
	{CTRY_TRINIDAD_Y_TOBAGO, FCC3_WORLD, "TT", "TRINIDAD AND TOBAGO"},
	{CTRY_TUNISIA, ETSI3_WORLD, "TN", "TUNISIA"},
	{CTRY_TURKEY, ETSI3_WORLD, "TR", "TURKEY"},
	{CTRY_UGANDA, FCC3_WORLD, "UG", "UGANDA"},
	{CTRY_UKRAINE, ETSI9_WORLD, "UA", "UKRAINE"},
	{CTRY_UAE, ETSI1_WORLD, "AE", "UNITED ARAB EMIRATES"},
	{CTRY_UNITED_KINGDOM, ETSI1_WORLD, "GB", "UNITED KINGDOM"},
	{CTRY_UNITED_STATES, FCC3_FCCA, "US", "UNITED STATES"},
	{CTRY_UNITED_STATES_AP, FCC6_FCCA, "US", "UNITED STATES2"},
	{CTRY_UNITED_STATES_PS, FCC4_FCCA, "PS", "US PUBLIC SAFETY"},
	{CTRY_URUGUAY, FCC3_WORLD, "UY", "URUGUAY"},
	{CTRY_UZBEKISTAN, FCC3_FCCA, "UZ", "UZBEKISTAN"},
	{CTRY_VENEZUELA, FCC1_WORLD, "VE", "VENEZUELA"},
	{CTRY_VIET_NAM, ETSI3_WORLD, "VN", "VIETNAM"},
	{CTRY_YEMEN, NULL1_WORLD, "YE", "YEMEN"},
	{CTRY_ZIMBABWE, NULL1_WORLD, "ZW", "ZIMBABWE"}
};

/**
 * enum ch_width - channel width
 * @CH_WIDTH_20MHZ: channel width 20 MHz
 * @CH_WIDTH_40MHZ: channel width 40 MHz
 * @CH_WIDTH_80MHZ: channel width 80MHz
 * @CH_WIDTH_160MHZ: channel width 160 MHz
 * @CH_WIDTH_80P80MHZ: channel width 160MHz(80+80)
 */
enum ch_width {
	CH_WIDTH_20MHZ = 0,
	CH_WIDTH_40MHZ = 1,
	CH_WIDTH_80MHZ = 2,
	CH_WIDTH_160MHZ = 3,
	CH_WIDTH_80P80MHZ = 4,
	CH_WIDTH_MAX
};

/**
 * struct ch_params_s
 *
 * @ch_width: channel width
 * @sec_ch_offset: secondary channel offset
 * @center_freq_seg0: center freq for segment 0
 * @center_freq_seg1: center freq for segment 1
 */
struct ch_params_s {
	enum ch_width ch_width;
	uint8_t sec_ch_offset;
	uint8_t center_freq_seg0;
	uint8_t center_freq_seg1;
};

static const REG_DOMAIN ah_cmn_reg_domains[] = {
	{DEBUG_REG_DMN, FCC},
	{APL1, FCC},
	{APL2, FCC},
	{APL3, FCC},
	{APL4, FCC},
	{APL5, FCC},
	{APL6, ETSI},
	{APL7, FCC},
	{APL8, ETSI},
	{APL9, ETSI},
	{APL10, ETSI},
	{APL11, ETSI},
	{APL12, ETSI},
	{ETSI1, ETSI},
	{ETSI2, ETSI},
	{ETSI3, ETSI},
	{ETSI4, ETSI},
	{ETSI5, ETSI},
	{ETSI6, ETSI},
	{ETSI8, ETSI},
	{ETSI9, ETSI},
	{FCC1, FCC},
	{FCC2, FCC},
	{FCC3, FCC},
	{FCC4, FCC},
	{FCC5, FCC},
	{FCC6, FCC},
	{MKK1, MKK},
	{MKK2, MKK},
	{MKK3, MKK},
	{MKK4, MKK},
	{MKK5, MKK},
	{MKK6, MKK},
	{MKK7, MKK},
	{MKK8, MKK},
	{MKK9, MKK},
	{MKK10, MKK},
	{MKK11, MKK},
	{MKK12, MKK},
	{MKK13, MKK},
	{MKK14, MKK},
	{MKK15, MKK},
	{APLD, NO_CTL},
	{ETSIA, NO_CTL},
	{ETSIB, ETSI},
	{ETSIC, ETSI},
	{FCCA, FCC},
	{MKKA, MKK},
	{MKKC, MKK},
	{WORLD, ETSI},
	{WOR0_WORLD, NO_CTL},
	{WOR01_WORLD, NO_CTL},
	{WOR02_WORLD, NO_CTL},
	{EU1_WORLD, NO_CTL},
	{WOR1_WORLD, NO_CTL},
	{WOR2_WORLD, NO_CTL},
	{WOR3_WORLD, NO_CTL},
	{WOR4_WORLD, NO_CTL},
	{WOR5_ETSIC, NO_CTL},
	{WOR9_WORLD, NO_CTL},
	{WORA_WORLD, NO_CTL},
	{WORB_WORLD, NO_CTL},
	{WORC_WORLD, NO_CTL},
	{NULL1, NO_CTL},
};

typedef enum offset {
	BW20 = 0,
	BW40_LOW_PRIMARY = 1,
	BW40_HIGH_PRIMARY = 3,
	BW80,
	BWALL
} offset_t;

typedef struct _regdm_op_class_map {
	uint8_t op_class;
	uint8_t ch_spacing;
	offset_t offset;
	uint8_t channels[MAX_CHANNELS_PER_OPERATING_CLASS];
} regdm_op_class_map_t;

typedef struct _regdm_supp_op_classes {
	uint8_t num_classes;
	uint8_t classes[CDS_MAX_SUPP_OPER_CLASSES];
} regdm_supp_op_classes;


int32_t cds_fill_some_regulatory_info(struct regulatory *reg);
void cds_fill_and_send_ctl_to_fw(struct regulatory *reg);
int32_t cds_get_country_from_alpha2(uint8_t *alpha2);
void cds_fill_send_ctl_info_to_fw(struct regulatory *reg);
void cds_set_wma_dfs_region(uint8_t dfs_region);
void cds_set_ch_params(uint8_t ch, uint32_t phy_mode,
		       struct ch_params_s *ch_params);

uint16_t cds_regdm_get_opclass_from_channel(uint8_t *country, uint8_t channel,
					    uint8_t offset);
uint16_t cds_regdm_get_chanwidth_from_opclass(uint8_t *country, uint8_t channel,
					    uint8_t opclass);
uint16_t cds_regdm_set_curr_opclasses(uint8_t num_classes, uint8_t *class);
uint16_t cds_regdm_get_curr_opclasses(uint8_t *num_classes, uint8_t *class);

#endif /* REGULATORY_H */
